#include <tbb/spin_mutex.h>
#include <tbb/parallel_reduce.h>
#include <tbb/task_group.h>


#include <bitset>




template <typename F>
void tarch::multicore::parallelReduce(
  const tarch::multicore::dForRange<1>&  range,
  F&                                     function
) {
  std::vector< dForRange<1> > ranges = range.getMinimalRanges();
  tbb::spin_mutex mutex;

  assertionEquals( static_cast<int>(ranges.size()), tarch::la::volume(range.getRange()) );

  tbb::parallel_for(
    tbb::blocked_range<size_t>(0,ranges.size(),1),
    [&](const tbb::blocked_range<size_t>& r) {
      F copyOfFunction(function);
      for(size_t i=r.begin(); i!=r.end(); ++i) {
        for (int i0=0; i0<ranges[i].getRange()(0); i0++) {
       	  tarch::la::Vector<1,int> loc;
          loc = i0;
          copyOfFunction(ranges[i](loc));
        }
      }

      tbb::spin_mutex::scoped_lock lock(mutex);
      copyOfFunction.mergeIntoMasterThread();
    },
	tbb::simple_partitioner()
  );
}


template <typename F>
void tarch::multicore::parallelReduce(
  const tarch::multicore::dForRange<2>&  range,
  F&                                     function
) {
  std::vector< dForRange<2> > ranges = range.getMinimalRanges();
  tbb::spin_mutex mutex;

  assertionEquals( static_cast<int>(ranges.size()), tarch::la::volume(range.getRange()) );

  #if defined(Asserts)
  std::bitset<256> hits[256];
  for (int i0=0; i0<range.getRange()(0); i0++)
  for (int i1=range.getRange()(1)-1; i1>=0; i1--) {
    hits[i0][i1] = false;
  }
  #endif

  tbb::parallel_for(
    tbb::blocked_range<size_t>(0,ranges.size(),1),
    [&](const tbb::blocked_range<size_t>& r) {
      F copyOfFunction(function);
      for(size_t i=r.begin(); i!=r.end(); ++i) {
        for (int i0=0; i0<ranges[i].getRange()(0); i0++)
        for (int i1=0; i1<ranges[i].getRange()(1); i1++) {
       	  tarch::la::Vector<2,int> loc;
          loc = i0, i1;
          copyOfFunction(ranges[i](loc));

          #if defined(Asserts)
          assertion4( !hits[ranges[i](loc)(0)][ranges[i](loc)(1)], i0, i1, loc, ranges[i].toString() );
          hits[ranges[i](loc)(0)][ranges[i](loc)(1)] = true;
          #endif
        }
      }

      tbb::spin_mutex::scoped_lock lock(mutex);
      copyOfFunction.mergeIntoMasterThread();
    },
	tbb::simple_partitioner()
  );
}




template <typename F>
void tarch::multicore::parallelReduce(
  const tarch::multicore::dForRange<3>&  range,
  F&                                     function
) {
  std::vector< dForRange<3> > ranges = range.getMinimalRanges();
  tbb::spin_mutex mutex;

  assertionEquals( static_cast<int>(ranges.size()), tarch::la::volume(range.getRange()) );

  tbb::parallel_for(
    tbb::blocked_range<size_t>(0,ranges.size(),1),
    [&](const tbb::blocked_range<size_t>& r) {
      F copyOfFunction(function);
      for(size_t i=r.begin(); i!=r.end(); ++i) {
        for (int i0=0; i0<ranges[i].getRange()(0); i0++)
        for (int i1=0; i1<ranges[i].getRange()(1); i1++)
        for (int i2=0; i2<ranges[i].getRange()(2); i2++) {
       	  tarch::la::Vector<3,int> loc;
          loc = i0, i1, i2;
          copyOfFunction(ranges[i](loc));
        }
      }

      tbb::spin_mutex::scoped_lock lock(mutex);
      copyOfFunction.mergeIntoMasterThread();
    },
	tbb::simple_partitioner()
  );
}


template <typename F>
void tarch::multicore::parallelReduce(
  const tarch::multicore::dForRange<4>&  range,
  F&                                     function
) {
  std::vector< dForRange<4> > ranges = range.getMinimalRanges();
  tbb::spin_mutex mutex;

  assertionEquals( static_cast<int>(ranges.size()), tarch::la::volume(range.getRange()) );

  tbb::parallel_for(
    tbb::blocked_range<size_t>(0,ranges.size(),1),
    [&](const tbb::blocked_range<size_t>& r) {
      F copyOfFunction(function);
      for(size_t i=r.begin(); i!=r.end(); ++i) {
        for (int i0=0; i0<ranges[i].getRange()(0); i0++)
        for (int i1=0; i1<ranges[i].getRange()(1); i1++)
        for (int i2=0; i2<ranges[i].getRange()(2); i2++)
        for (int i3=0; i3<ranges[i].getRange()(3); i3++) {
       	  tarch::la::Vector<4,int> loc;
          loc = i0, i1, i2, i3;
          copyOfFunction(ranges[i](loc));
        }
      }

      tbb::spin_mutex::scoped_lock lock(mutex);
      copyOfFunction.mergeIntoMasterThread();
    },
	tbb::simple_partitioner()
  );
}


template <typename F>
void tarch::multicore::parallelFor(
  const tarch::multicore::dForRange<1>&  range,
  F&                                     function
) {
  std::vector< dForRange<1> > ranges = range.getMinimalRanges();

  tbb::task_group g;
  for(size_t i=0; i!=ranges.size(); ++i) {
    g.run( [&,i]() {
      for (int i0=0; i0<ranges[i].getRange()(0); i0++) {
        tarch::la::Vector<1,int> loc;
        loc(0) = i0;
        function(ranges[i](loc));
      }
    });
  }
  g.wait();
}


template <typename F>
void tarch::multicore::parallelFor(
  const tarch::multicore::dForRange<2>&  range,
  F&                                     function
) {
//	dann halt Job-basiert, wenn es so nicht geht
/*
  std::vector< dForRange<2> > ranges = range.getMinimalRanges();

  tbb::task_group_context* myContext = new tbb::task_group_context;

  tbb::parallel_for(
    tbb::blocked_range<size_t>(0,ranges.size(),1),
    [&](const tbb::blocked_range<size_t>& r) -> void {
      for(size_t i=r.begin(); i!=r.end(); ++i) {
        for (int i0=0; i0<ranges[i].getRange()(0); i0++)
        for (int i1=0; i1<ranges[i].getRange()(1); i1++) {
       	  tarch::la::Vector<2,int> loc;
          loc(0) = i0;
          loc(1) = i1;
          function(ranges[i](loc));
        }
      }
    },
	tbb::simple_partitioner(), *myContext
  );
*/

/*

  tarch::la::Vector<2,int> loc;
  for (int i0=0; i0<range.getRange()(0); i0++)
  for (int i1=0; i1<range.getRange()(1); i1++) {
    loc(0) = i0;
    loc(1) = i1;
    function(range(loc));
  }
*/

/*
  std::vector< dForRange<2> > ranges = range.getMinimalRanges();

  for(size_t i=0; i!=ranges.size(); ++i) {
    for (int i0=0; i0<ranges[i].getRange()(0); i0++)
    for (int i1=0; i1<ranges[i].getRange()(1); i1++) {
  	  tarch::la::Vector<2,int> loc;
      loc(0) = i0;
      loc(1) = i1;
      function(ranges[i](loc));
    }
  }
*/



  std::vector< dForRange<2> > ranges = range.getMinimalRanges();

  tbb::task_group g;
  for(size_t i=0; i!=ranges.size(); ++i) {
    g.run( [&,i]() {
      for (int i0=0; i0<ranges[i].getRange()(0); i0++)
      for (int i1=0; i1<ranges[i].getRange()(1); i1++) {
        tarch::la::Vector<2,int> loc;
        loc(0) = i0;
        loc(1) = i1;
        function(ranges[i](loc));
      }
    });
  }
  g.wait();
}




template <typename F>
void tarch::multicore::parallelFor(
  const tarch::multicore::dForRange<3>&  range,
  F&                                     function
) {
  std::vector< dForRange<3> > ranges = range.getMinimalRanges();

  tbb::task_group g;
  for(size_t i=0; i!=ranges.size(); ++i) {
    g.run( [&,i]() {
      for (int i0=0; i0<ranges[i].getRange()(0); i0++)
      for (int i1=0; i1<ranges[i].getRange()(1); i1++)
      for (int i2=0; i2<ranges[i].getRange()(2); i2++) {
        tarch::la::Vector<3,int> loc;
        loc(0) = i0, i1, i2;
        function(ranges[i](loc));
      }
    });
  }
  g.wait();
}



template <typename F>
void tarch::multicore::parallelFor(
  const tarch::multicore::dForRange<4>&  range,
  F&                                     function
) {
  std::vector< dForRange<4> > ranges = range.getMinimalRanges();

  tbb::task_group g;
  for(size_t i=0; i!=ranges.size(); ++i) {
    g.run( [&,i]() {
      for (int i0=0; i0<ranges[i].getRange()(0); i0++)
      for (int i1=0; i1<ranges[i].getRange()(1); i1++)
      for (int i2=0; i2<ranges[i].getRange()(2); i2++)
      for (int i3=0; i3<ranges[i].getRange()(3); i3++) {
        tarch::la::Vector<4,int> loc;
        loc(0) = i0, i1, i2, i3;
        function(ranges[i](loc));
      }
    });
  }
  g.wait();
}


