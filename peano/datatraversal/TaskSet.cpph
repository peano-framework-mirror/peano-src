#include "tarch/Assertions.h"
    
#include "tarch/multicore/BackgroundTasks.h"


template <class Functor>
peano::datatraversal::TaskSet::TaskSet(
  Functor&  myTask,
  TaskType  taskType
) {
  switch (taskType) {
    case TaskType::RunAsSoonAsPossible:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::RunAsSoonAsPossible) );
      }
      break;
    case TaskType::LoadCells:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        // @todo
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::LoadVertices:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        // @todo
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::TriggerEvents:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        // @todo
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::StoreCells:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        // @todo
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::StoreVertices:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        // @todo
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::Background:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Background) );
      }
      break;
    case TaskType::LongRunningBackground:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::LongRunningBackground) );
      }
      break;
    case TaskType::PersistentBackground:
      {
        typedef tarch::multicore::GenericTaskWithCopy<Functor> Task;
        tarch::multicore::spawnBackgroundTask( new Task(myTask,tarch::multicore::TaskType::Persistent) );
      }
      break;
  }
}
